<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "SS7_Stack_User_Guide.ent">%BOOK_ENTITIES;]>

<chapter id="protocol">

	<title>Protocol</title>

	<section>
		<title>API</title>
		<section>
			<title>Stack</title>
			<para>
				SCCP
				stack relies on
				MTP
				to provide transport. The stack interface is defined as follows:
			</para>
			<programlisting language="Java" role="JAVA">
package org.mobicents.protocols.ss7.sccp;

import java.util.List;

import org.mobicents.protocols.StartFailedException;
import org.mobicents.protocols.ss7.mtp.provider.MtpProvider;

/**
 * 
 * @author baranowb
 * @author kulikov
 */
public interface SccpStack {
    public final static int UDT_ONLY = 1;
    public final static int XUDT_ONLY = 2;
    
    /**
     * Starts SCCP stack.
     * 
     * @throws java.lang.IllegalStateException
     * @throws org.mobicents.protocols.StartFailedException
     */
    public void start() throws IllegalStateException, StartFailedException;
    
    /**
     * Terminates SCCP stack.
     * 
     * @throws java.lang.IllegalStateException
     * @throws org.mobicents.protocols.StartFailedException
     */
    public void stop();
    
    /**
     * Assigns linksets. 
     * 
     * Current versions suppose static assignment. 
     * For next versions implement link management functions.
     * 
     * @param linksets the list of available linksets.
     */
    public void setLinksets(List&lt;MtpProvider&gt; linksets);

    /**
     * Exposes SCCP provider object to SCCP user.
     * 
     * @return SCCP provider object.
     */
    public SccpProvider getSccpProvider();
    
    /**
     * Allows to plug custom implementation of SCCP router 
     * 
     * @param router the router implementation.
     */
    public void setRouter(Router router);
    
    /**
     * Defines transfer type for outgoing messages.
     * 
     * @param type the type of transfer. valid values are UDT_ONLY and XUDT_ONLY.
     */
    public void setTransferType(int type);

}
				</programlisting>
		</section>
		<section>
			<title>Provider</title>
			<para>
				Stack declares the provider that allows the user to access stack
				facilities,
				send messages statelessly and register a listener. The provider
				is defined
				as follows:
			</para>
			<programlisting language="Java" role="JAVA">
package org.mobicents.protocols.ss7.sccp;

import java.io.IOException;
import java.io.Serializable;

import org.mobicents.protocols.ss7.sccp.message.MessageFactory;
import org.mobicents.protocols.ss7.sccp.message.SccpMessage;
import org.mobicents.protocols.ss7.sccp.parameter.ParameterFactory;
import org.mobicents.protocols.ss7.sccp.parameter.SccpAddress;

public interface SccpProvider extends Serializable {

    /**
     * Gets the access to message factory.
     * 
     * @return message factory.
     */
    public MessageFactory getMessageFactory();

    /**
     * Gets the access to parameter factory.
     * 
     * @return parameter factory
     */
    public ParameterFactory getParameterFactory();
   
    /**
     * Register listener for some adddress.
     * @param listener
     */
    public void registerSccpListener(SccpAddress localAddress,SccpListener listener);

    /**
     * Removes listener
     */
    public void deregisterSccpListener(SccpAddress localAddress);
    
    
    /**
     * Sends message.
     * 
     * @param message the message to be sent.
     * @param destination the address of the recipient.
     * @throws IOException
     */
    public void send(SccpMessage message) throws IOException;

}
		</programlisting>
			<para>
				The provider allows the user to register a listener per address. The listener will
				be called whenever the stack receives a message that called the 
				party equal
				to that address.
				The listener is defined as follows:
			</para>
			<programlisting language="Java" role="JAVA">
package org.mobicents.protocols.ss7.sccp;

import org.mobicents.protocols.ss7.sccp.message.SccpMessage;

public interface SccpListener  {
	/**
	 * Called when proper data is received, it is partially decoded. This method is called with message payload.
	 * @param calledPartyAddress - destination address
	 * @param callingPartyAddress - originating address
	 * @param data - payload of data unit
	 */
	public void onMessage(SccpMessage message);
}

		</programlisting>
		</section>


	</section>
	<section>
		<title>Example</title>
		<para>
			Below is a simple example for how to use
			<literal>SCCP</literal>.
		</para>
		<programlisting language="Java" role="JAVA">
import org.mobicents.protocols.ss7.mtp.provider.m3ua.Provider;
		
//create linksets
Properties p = new Properties();
p.put("mtp.address.remote","192.168.1.35:1025");
p.put("mtp.address.local","192.168.1.248:1000");
p.put("mtp.apc","3516");
p.put("mtp.opc","13500");

MtpProvider linkset1 = new Provider();
linkset1.configure(p);

p.put("mtp.address.remote","192.168.1.35:1026");
p.put("mtp.address.local","192.168.1.248:1001");
p.put("mtp.apc","3517");
p.put("mtp.opc","13501");

MtpProvider linkset2 = new Provider();
linkset2.configure(p);

SccpStack stack = new SccpStackImpl();
List&lt;MtpProvider&gt; linksets = new ArrayList&lt;MtpProvider&gt;();
linksets.add(linkset1);
linksets.add(linkset2);

stack.setLinksets(linksets);
stack.setTransferType(SccpStack.XUDT_ONLY);
stack.start(); //this will start Mtp also.

GlobalTitle gt1 = GlobalTitle.getInstance(NatureOfAddress.NATIONAL, "321");
SccpAddress  peer1Address = new SccpAddress(gt1, 0);

GlobalTitle gt2 = GlobalTitle.getInstance(NatureOfAddress.NATIONAL, "4820013425");
SccpAddress  peer2Address = new SccpAddress(gt2, 0);

stack.getSccpProvider().registerSccpListener(peer1Address,new SccpListener{....});
HopCounter hc = stack.getSccpProvider().getParameterFactory().createHopCounter(3);
ProtocolClass pc = stack.getSccpProvider().getParameterFactory().createProtocolClass(0);
SccpMessage msg = stack.getSccpProvider().getMessageFactory().createXUnitData(hc,pc,peer2Address,peer1Address)
stack.getSccpProvider().sendMessage(msg);

		</programlisting>
	</section>

</chapter>

