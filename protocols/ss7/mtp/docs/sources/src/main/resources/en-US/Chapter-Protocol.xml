<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "SS7_Stack_User_Guide.ent">%BOOK_ENTITIES;]>

<chapter id="protocol">

	<title>Protocol</title>
	<para></para>

	<section>
		<title>API Overview</title>
		<para>
			<acronym>MTP</acronym>
			layer is built with several components. Following list those that may
			be directly involved in creating application on top of this stack:
		</para>
		<variablelist>
			<varlistentry>
				<term>org.mobicents.protocols.ss7.mtp.Mtp1</term>
				<listitem>

					<para>
						This interface is implemented by classes directly interacting with
						<acronym>SS7</acronym>
						hardware. It declares utility methods to open/close underlying
						implementations and generic read/write methods. It is decalred as
						follows:
					</para>
					<programlisting language="Java" role="JAVA">
package org.mobicents.protocols.ss7.mtp;

import java.io.IOException;

public interface Mtp1 {
	/**
	 * Gets the code of this channel.
	 * 
	 * @return the code of this channel.
	 */
	public int getCode();

	/**
	 * Set MTP2 layer serving this MTP1
	 * 
	 * @param link
	 */
	public void setLink(Mtp2 link);

	/**
	 * Get MTP2 latyer serving this MTP1
	 * 
	 * @return
	 */
	public Mtp2 getLink();

	/**
	 * Reads up to buffer.length bytes from layer 1.
	 * 
	 * @param buffer
	 *            reader buffer
	 * @return the number of actualy read bytes.
	 */
	public int read(byte[] buffer) throws IOException;

	/**
	 * Writes data to layer 1.
	 * 
	 * @param buffer
	 *            the buffer containing data to write.
	 * @param bytesToWrite
	 */
	public void write(byte[] buffer, int bytesToWrite) throws IOException;

	/**
	 * Open message tranfer part layer 1.
	 */
	public void open() throws IOException;

	/**
	 * Close message tranfer part layer 1.
	 */
	public void close();

}
					</programlisting>
				</listitem>
			</varlistentry>
			
			<varlistentry>
				<term>org.mobicents.protocols.ss7.mtp.Mtp2</term>
				<listitem>
					<para>This is concrete implementation of <acronym>MTP2</acronym> layer. 
					It requires <literal>Mtp1</literal>. It declares following methods, relevant to configuration process:</para>
					<itemizedlist>
						<listitem>
							<para><literal>public void setLayer1(Mtp1 layer1) </literal> - sets concrete <literal>MTP1</literal> serving for this link</para>
						</listitem>
						<listitem>
							<para><literal> public void setLayer3(Mtp2Listener layer3) </literal> - sets listener which receives call backs from this layer (actually its<literal>MTP3</literal>)</para>
						</listitem>				
					</itemizedlist>
					<para>
						<literal>Mtp2</literal> declares single method for data send operation: <literal>public boolean queue(byte[] msg)</literal>. This method requires properly formed <literal>Mtp3</literal> message.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>org.mobicents.protocols.ss7.mtp.Mtp3</term>
				<listitem>
					<para>This is concrete implementation of <acronym>MTP3</acronym> layer. It implements state machine and encoding/decoding rules. It declares following methods, relevant from user point:</para>
					<itemizedlist>
						<listitem>
							<para><literal> public void setSelectorFactory(SelectorFactory selectorFactory) </literal> - sets selector factory for <literal>Mtp1</literal></para>
						</listitem>
						<listitem>
							<para><literal> public void setOpc(int opc)</literal> - sets local <literal>point code</literal> </para>
						</listitem>
						<listitem>
							<para><literal>  public void setDpc(int dpc)</literal> - set remote <literal>point code</literal> </para>
						</listitem>
						<listitem>
							<para><literal>public void setLinks(List&lt;Mtp2&gt; channels)</literal> - sets list of <literal>Mtp2</literal> links. Each channel should have <literal>Mtp1</literal> assigned.</para>
						</listitem>
						
						<listitem>
							<para><literal>public void setUserPart(MtpUser mtpUser) </literal> - sets concrete implementation of <literal>MtpUser</literal> interface. It will be called back to inform about events in this layer.</para>
						</listitem>
						<listitem>
							<para><literal> public boolean send(byte[] msg) </literal> - sends passed message down the stream. It expects well formed <acronym>MTP3</acronym> message.</para>
						</listitem>					
					</itemizedlist>
					<para> <literal>MtpUser</literal> is defined in following way:</para>
					<programlisting language="Java" role="JAVA">
package org.mobicents.protocols.ss7.mtp;

public interface MtpUser {

	/**
	 * Callback method from lower layers MTP3-. This is called once MTP3
	 * determines that link is stable and is able to send/receive messages
	 * properly. This method should be called only once. Every linkup event.
	 */
	public void linkUp();

	/**
	 * Callback method from MTP3 layer, informs upper layers that link is not
	 * operable.
	 */
	public void linkDown();

	/**
	 * Callback from Layer4+. It expects properly encoded MTP3 message. It forwards data to MTP3
	 * @param msgBuff
	 */
	public void receive(byte[] msgBuff);
	
	public void setMtp3(Mtp3 mtp);

}
					</programlisting>
				</listitem>
			</varlistentry>
		
			<varlistentry>
				<term>org.mobicents.protocols.ss7.mtp.RoutingLabel</term>
				<listitem>
					<para>This is utility class used by other layers. It extracts routing label from <acronym>MTP3</acronym> <acronym>MSU</acronym> and performs operation to create label ready to be used in answers.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>org.mobicents.protocols.ss7.mtp.provider.MtpProvider</term>
				<listitem>
					<para>This interface defines contract with upper layer protocol stacks. Its concrete implementation is created wtih <literal>MtpProviderFactory</literal> class. It is defined as follows: </para>
					<programlisting language="Java" role="JAVA">
package org.mobicents.protocols.ss7.mtp.provider;

import java.io.IOException;
import java.util.Properties;
import org.mobicents.protocols.ConfigurationException;
import org.mobicents.protocols.StartFailedException;

public interface MtpProvider {

    /**
     * Assigns originated point code
     * 
     * @param opc the originated point code
     */
    public void setOriginalPointCode(int opc);

    /**
     * Assigns destination point code.
     * 
     * @param dpc destination point code in decimal format.
     */
    public void setAdjacentPointCode(int dpc);

    /**
     * @return the dpc
     */
    public int getAdjacentPointCode();

    /**
     * @return the opc
     */
    public int getOriginalPointCode();

    /**
     * Sets listener for MTP callbacks. If null is passed internal refence is
     * cleared.
     * 
     * @param lst
     */
    public void setMtpListener(MtpListener lst);

    /**
     * Passes argument to MTP layers for processing. Passed buffer should not be
     * reused after passing to this method!
     * 
     * @param msu
     * @throws IOException
     *             - when IO can not be performed, ie, link is not up.
     * @return
     */
    public void send(byte[] msu) throws IOException;

    /**
     * Starts this provider implementation. Depending on internal it can start
     * local MTP process, or M3UA layer.
     * 
     * @throws IOException
     * @throws StartFailedException
     */
    public void start() throws StartFailedException;

    /**
     * Stops this provider. This call clears all references, ie. listener is
     * cleared as {@link #setMtpListener(MtpListener)} with null argument.
     */
    public void stop();

    /**
     * Method which configures implementation. Depending on implementation
     * different properties are supported. However each property starts with
     * "mtp." prefix.
     * 
     * @param p
     */
    public void configure(Properties p) throws ConfigurationException;

    /**
     * Checks if link is up;
     * 
     * @return
     */
    public boolean isLinkUp();
}

					</programlisting>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>org.mobicents.protocols.ss7.mtp.provider.MtpListener</term>
				<listitem>
					<para>This interface defines callback methods which are called from <literal>MtpProvider</literal> concrete class.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>org.mobicents.protocols.ss7.mtp.provider.MtpProviderFactory</term>
				<listitem>
					<para>Factory class for concrete implementation of <literal>MtpProvider</literal>. Create method accepts <literal>java.util.Properties</literal>. It expects <literal>mtp.driver</literal> property to contain either full class name of concrete implementation of provider or name of supported providers. </para>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>
	<section>
		<title>Configuration</title>
		<para><literal>MTP Providers</literal> support different properties based on implementation. However each property must start with <literal>mtp.</literal> prefix.</para>

		<section>
			<title>M3UA Provider</title>
			<para> <literal>M3UA Provider</literal> is provider which enables higher layer to be integrated with M3 User Adaptation layer.
			Implementation class of this provider is <filename>org.mobicents.protocols.ss7.mtp.provider.m3ua.Provider</filename>. It is based on
			&THIS.PLATFORM; M3UA Library. 
			</para>
			<para>
			It supports following configuration properties:</para>
			<table frame="all" pgwide="1" id="table-mtp_properties_2">
					<title>M3UAProvider configuration properties</title>
					<tgroup cols="2" colsep="1">
						<colspec colname="c1"/>
						<colspec colname="c2"/>
						<thead>
							<row>
								<entry>Property name </entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
	

							<row>
								<entry>mtp.address.remote</entry>
								<entry>Address of remote end of data link. It expects data in format: <literal>IP:Port</literal> .</entry>				
							</row>
							<row>
								<entry>mtp.address.local</entry>
								<entry>As above. It points to local address to which data link is bound.</entry>				
							</row>
							<row>
								<entry>mtp.apc</entry>
								<entry>Indicates adjacent point code (dpc for originating messages).</entry>				
							</row>
							<row>
								<entry>mtp.opc</entry>
								<entry>Indiactes oritinating point code.</entry>				
							</row>
						</tbody>
					</tgroup>
				</table>
				<para>Example properties file which will configure this provider look as foolows:</para>
				<programlisting>
mtp.address.remote=127.0.0.1:3434
mtp.address.local=127.0.0.1:3435
mtp.opc=13159
mtp.apc=350
				</programlisting>
		</section>
	</section>
	
	
</chapter>

