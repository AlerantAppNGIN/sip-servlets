<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "M3UA_User_Guide.ent">%BOOK_ENTITIES;]>

<chapter id="example">

	<title>Example</title>

	<para>This chapter contains a simple example of client and server code.</para>
	
	<section id="example.client">	
		<title>Client</title>
		<programlisting language="java" role="JAVA">
 private class Client implements Runnable {
 private M3UAProvider provider;
 private M3UAChannel channel;
 private M3UASelector selector;
 private M3UASelectionKey skey;
 private volatile boolean started = false;
 
 private String rxMessage = "";        
 private String[] txMessage = new String[]{"Hello", " ", "world"};
 
 public Client(InetAddress address, int port) throws IOException {
     provider = TcpProvider.open();
     channel = provider.openChannel();
     channel.bind(new InetSocketAddress(address, port));
     
     selector = provider.openSelector();
     skey = channel.register(selector, SelectionKey.OP_READ | SelectionKey.OP_WRITE);
 }
 
 @SuppressWarnings("static-access")
 public void connect(InetAddress endpoint, int port) throws IOException {
     channel.connect(new InetSocketAddress(endpoint, port));
     if (channel.isConnectionPending()) {
         while (!channel.isConnected()) {
             channel.finishConnect();
             try {
                 Thread.currentThread().sleep(10);
             } catch (Exception e) {
             }
         }
     }
 }
 
 public void start() {
     started = true;
     new Thread(this).start();
 }
 
 public void stop() throws IOException {
     started = false;
 }
 
 public String getReceivedMessage() {
     return rxMessage;
 }
 
 public void run() {
     int i = 0;
     while (started) {
         try {
             Collection&lt;M3UASelectionKey&gt; keys = selector.selectNow();
             for (M3UASelectionKey key : keys) {
                 M3UAChannel chan = (M3UAChannel) key.channel();
                 if (key.isReadable()) {
                     TransferMessage msg = (TransferMessage) chan.receive();
                     System.out.println("Receive message " + msg);
                     rxMessage += new String(msg.getData().getData());
                 }
                        
                 if (key.isWritable() &amp;&amp; i &lt; txMessage.length) {
                     chan.send(createMessage(provider, txMessage[i++]));
                 }
             }
         } catch (Exception e) {
             e.printStackTrace();
         }
     }
     
     try {
         skey.cancel();
         selector.close();
         channel.close();
     } catch (IOException e) {
         e.printStackTrace();
     }
 }
}
		</programlisting>
	</section>
	<section id="example.server">	
		<title>Server</title>
		<programlisting language="java" role="JAVA">
 private class Server implements Runnable {
 
 private M3UAProvider provider;
 private M3UAServerChannel serverChannel;
 private M3UAChannel channel;
 private M3UASelector selector;
 private M3UASelectionKey skey;
 
 private volatile boolean started = false;
 
 private String rxMessage = ""; 
 private String[] txMessage = new String[]{"Hello", " ", "world"};
 
 public Server(InetAddress address, int port) throws IOException {
     provider = TcpProvider.open();
     serverChannel = provider.openServerChannel();
     serverChannel.bind(new InetSocketAddress(address, port));
     
     selector = provider.openSelector();
     skey = serverChannel.register(selector, SelectionKey.OP_ACCEPT);
 }
 
 public void start() {
     started = true;
     new Thread(this).start();
 }
 
 public void stop() throws IOException {
     started = false;
 }
 
 public String getReceivedMessage() {
     return rxMessage;
 }
 
 private void accept() throws IOException {
     channel = serverChannel.accept();
     skey.cancel();
     skey = channel.register(selector, SelectionKey.OP_READ | SelectionKey.OP_WRITE);
 }
 
 public void run() {
     int i = 0;
     while (started) {
         try {
             Collection&lt;M3UASelectionKey&gt; keys = selector.selectNow();
             for (M3UASelectionKey key : keys) {
                 if (key.isAcceptable()) {
                     M3UAServerChannel chan = (M3UAServerChannel) key.channel();
                     accept();
                 } else if (key.isReadable()) {
                     M3UAChannel chan = (M3UAChannel) key.channel();
                     TransferMessage msg = (TransferMessage) chan.receive();
                     System.out.println("Receive " + msg);
                     rxMessage += new String(msg.getData().getData());
                 } else if (key.isWritable() &amp;&amp; i &lt; txMessage.length) {
                     M3UAChannel chan = (M3UAChannel) key.channel();
                     chan.send(createMessage(provider, txMessage[i++]));
                 }
             }
         } catch (IOException e) {
             e.printStackTrace();
         }
     }
     
     try {
         skey.cancel();
         if (channel != null) {
             channel.close();
         }
         serverChannel.close();
         selector.close();
     } catch (IOException e) {
         e.printStackTrace();
     }
 }

}
		</programlisting>
	</section>
</chapter>

