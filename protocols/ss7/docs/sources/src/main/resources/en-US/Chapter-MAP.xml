<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "SS7_Stack_User_Guide.ent">%BOOK_ENTITIES;]>

<chapter
	id="map">

	<title>MAP</title>

	<para>
		Mobile application part (
		<acronym>MAP</acronym>
		) is the protocol that is used to allow the
		<acronym>GSM</acronym>
		network nodes
		within the Network Switching Subsystem (
		<acronym>NSS</acronym>
		) to communicate with each other to provide services, such as roaming capability,
		text messaging (
		<acronym>SMS</acronym>
		), Unstructured Supplementary Service Data (
		<acronym>USSD</acronym>
		) and subscriber authentication.
		<acronym>MAP</acronym>
		provides an application layer on which to build the services that support a
		<acronym>GSM</acronym>
		network.
		This application layer provides a standardized set of services.
		<acronym>MAP</acronym>
		uses the services of the
		<acronym>SS7</acronym>
		network,
		specifically the Signaling Connection Control Part (
		<acronym>SCCP</acronym>
		) and the Transaction Capabilities Application Part (
		<acronym>TCAP</acronym>
		)
	</para>
	<important>
		<para>For better understanding of this chapter please read GSM 09.02.</para>
	</important>
	<section
		id="map_usage">
		<title>&THIS.APPLICATION;
			MAP Usage
		</title>
		<para>
			<classname>org.mobicents.protocols.ss7.map.api.MAPStack</classname>
			interface defines the methods required to represent MAP Protocol Stack.
			MAPStack exposes
			<classname>org.mobicents.protocols.ss7.map.api.MAPProvider</classname>
			that interacts directly with MAPStack. This interface
			defines the methods that will be used by any registered MAP User application implementing the
			<classname>org.mobicents.protocols.ss7.map.api.MAPDialogListener</classname>
			and
			<classname>org.mobicents.protocols.ss7.map.api.MAPServiceListener</classname>
			interface to listen MAP messages and dialogue handling primitives. The class diagram looks like
		</para>

		<mediaobject
			id="map_classdia">
			<imageobject>
				<imagedata
					width="300px"
					align="center"
					fileref="images/MapClassDiagram.png"
					format="PNG" />
			</imageobject>
			<caption>
				<para>&THIS.PLATFORM; &THIS.APPLICATION;
					MAP Class Diagram
				</para>
			</caption>
		</mediaobject>

		<note>
			<para>&THIS.PLATFORM; &THIS.APPLICATION;
				MAP has implementation for USSD Message only. Any contribution to implement
				message specific to SMS or other are welcome. We will provide you all the help that you may need initially.
			</para>
		</note>

		<para>
			<classname>org.mobicents.protocols.ss7.map.MAPStackImpl</classname>
			is concrete implementation of
			<classname>MAPStack</classname>
			.
			The MAP User application creates instance of
			<classname>MAPStackImpl</classname>
			passing the reference of
			<classname>SccpProvider</classname>
			and
			new instance of
			<classname>SccpAddress</classname>
			representing address to which bind listener. This addess will be used to match against destination address in <literal>SCCP</literal> messages.
		</para>

		<programlisting
			language="Java"
			role="JAVA"><![CDATA[	
		SccpProvider sccpProvider = getSccpProvider(); //JNDI lookup of SCCP Stack and get Provider
		SccpAddress localAddress createLocalAddress();		

        MAPStackImpl mapStack = new MAPStackImpl(sccpPprovider, localAddress);
        
        ...
        
        private SccpAddress createLocalAddress()
        {
	 		int translationType = 0;
	
	        int subSystemNumber = 0;
	
	
	        GlobalTitle gt = GlobalTitle.getInstance(translationType,
	
	        NumberingPlan.ISDN_MOBILE, NatureOfAddress.NATIONAL, "1234");

	        SccpAddress localAddress = new SccpAddress(gt, 0);
	        return localAddress;
        }
        

		]]>
	</programlisting>

		<para>
			The reference to
			<classname>SccpProvider</classname>
			is received from
			<classname>SccpStack</classname>
			.
			To get handle to
			<classname>SccpStack</classname>
			do the JNDI look-up passing the
			JNDI name configured in SS7 service as explained in
			<xref
				linkend="sccp_access_point" />
		</para>

		<para>
			The MAP User application should register the concrete implementation of
			<classname>MAPDialogListener</classname>
			and
			<classname>MAPServiceListener</classname>
			with
			<classname>MAPProvider</classname>
			to listen for incoming MAP Dialog and MAP Primitive messages.
		</para>

		<programlisting
			language="Java"
			role="JAVA"><![CDATA[
public class MAPExample implements MAPDialogListener, MAPServiceListener {
		.....		
		mapProvider = mapStack.getMAPProvider();
        mapProvider.addMAPDialogListener(this);
        mapProvider.addMAPServiceListener(this);
        ....
}        		
		]]>
	</programlisting>

		<para>
			The MAP User Application leverages
			<classname>MapServiceFactory</classname>
			to create instance of
			<classname>USSDString</classname>
			and
			<classname>AddressString</classname>
		</para>

		<programlisting
			language="Java"
			role="JAVA"><![CDATA[
		MapServiceFactory servFact = mapProvider.getMapServiceFactory();
        USSDString ussdString = servFact.createUSSDString("*125*+31628839999#",
                null);

        AddressString msisdn = this.servFact.createAddressString(
                AddressNature.international_number, NumberingPlan.ISDN,
                "31628838002");       		
		]]>
	</programlisting>

		<para>
			The MAP User Application leverages
			<classname>MAPProvider</classname>
			to create new
			<classname>MAPDialog</classname>
			and send USSD message
		</para>

		<programlisting
			language="Java"
			role="JAVA"><![CDATA[
        // First create Dialog
        MAPDialog mapDialog = mapProvider.createNewDialog(
                MAPApplicationContext.networkUnstructuredSsContextV2,
                destAddress, destReference, origAddress, origReference);

        byte ussdDataCodingScheme = 0x0f;

        // USSD String: *125*+31628839999#
        // The Charset is null, here we let system use default Charset (UTF-7 as
        // explained in GSM 03.38. However if MAP User wants, it can set its own
        // impl of Charset
        USSDString ussdString = servFact.createUSSDString("*125*+31628839999#",
                null);

        AddressString msisdn = this.servFact.createAddressString(
                AddressNature.international_number, NumberingPlan.ISDN,
                "31628838002");

        mapDialog.addProcessUnstructuredSSRequest(ussdDataCodingScheme,
                ussdString, msisdn);

        // This will initiate the TC-BEGIN with INVOKE component
        mapDialog.send();     		
		]]>
	</programlisting>

	</section>
	<section
		id="map_usage_example">
		<title>&THIS.APPLICATION;
			MAP Usage
		</title>
		<para>The complete example looks like</para>

		<programlisting
			language="Java"
			role="JAVA"><![CDATA[
public class MAPExample implements MAPDialogListener, MAPServiceListener {

    private MAPStack mapStack;
    private MAPProvider mapProvider;

    MapServiceFactory servFact;

    SccpAddress destAddress = null;

    // The address created by passing the AddressNature, NumberingPlan and
    // actual address
    AddressString destReference = servFact.createAddressString(
            AddressNature.international_number, NumberingPlan.land_mobile,
            "204208300008002");

    SccpAddress origAddress = null;

    AddressString origReference = servFact.createAddressString(
            AddressNature.international_number, NumberingPlan.ISDN,
            "31628968300");

    MAPExample(SccpProvider sccpPprovider, SccpAddress address,
            SccpAddress remoteAddress) {
        origAddress = address;
        destAddress = remoteAddress;

        mapStack = new MAPStackImpl(sccpPprovider, origAddress);
        mapProvider = mapStack.getMAPProvider();
        servFact = mapProvider.getMapServiceFactory();

        mapProvider.addMAPDialogListener(this);
        mapProvider.addMAPServiceListener(this);
    }

    private static SccpProvider getSccpProvider() throws NamingException {

        // no arg is ok, if we run in JBoss
        InitialContext ctx = new InitialContext();
        try {
            String providerJndiName = "/mobicents/ss7/sccp";
            return ((SccpStack) ctx.lookup(providerJndiName)).getSccpProvider();

        } finally {
            ctx.close();
        }
    }

    private static SccpAddress createLocalAddress() {
        GlobalTitle gt = GlobalTitle
                .getInstance(
                        NatureOfAddress.NATIONAL.getValue(),
                        org.mobicents.protocols.ss7.indicator.NumberingPlan.ISDN_MOBILE,
                        NatureOfAddress.NATIONAL, "1234");

        return new SccpAddress(gt, 0); // 0 is Sub-System number
    }

    private static SccpAddress createRemoteAddress() {
        GlobalTitle gt = GlobalTitle
                .getInstance(
                        NatureOfAddress.NATIONAL.getValue(),
                        org.mobicents.protocols.ss7.indicator.NumberingPlan.ISDN_MOBILE,
                        NatureOfAddress.NATIONAL, "1572582");

        return new SccpAddress(gt, 0); // 0 is Sub-System number
    }

    public void run() throws Exception {

        // First create Dialog
        MAPDialog mapDialog = mapProvider.createNewDialog(
                MAPApplicationContext.networkUnstructuredSsContextV2,
                destAddress, destReference, origAddress, origReference);

        // The dataCodingScheme is still byte, as I am not exactly getting how
        // to encode/decode this.
        byte ussdDataCodingScheme = 0x0f;

        // USSD String: *125*+31628839999#
        // The Charset is null, here we let system use default Charset (UTF-7 as
        // explained in GSM 03.38. However if MAP User wants, it can set its own
        // impl of Charset
        USSDString ussdString = servFact.createUSSDString("*125*+31628839999#",
                null);

        AddressString msisdn = this.servFact.createAddressString(
                AddressNature.international_number, NumberingPlan.ISDN,
                "31628838002");

        mapDialog.addProcessUnstructuredSSRequest(ussdDataCodingScheme,
                ussdString, msisdn);

        // This will initiate the TC-BEGIN with INVOKE component
        mapDialog.send();
    }

    public void onMAPAcceptInfo(MAPAcceptInfo mapAccptInfo) {
        // TODO Auto-generated method stub

    }

    public void onMAPCloseInfo(MAPCloseInfo mapCloseInfo) {
        // TODO Auto-generated method stub

    }

    public void onMAPOpenInfo(MAPOpenInfo mapOpenInfo) {
        // TODO Auto-generated method stub

    }

    public void onMAPProviderAbortInfo(MAPProviderAbortInfo mapProviderAbortInfo) {
        // TODO Auto-generated method stub

    }

    public void onMAPRefuseInfo(MAPRefuseInfo mapRefuseInfo) {
        // TODO Auto-generated method stub

    }

    public void onMAPUserAbortInfo(MAPUserAbortInfo mapUserAbortInfo) {
        // TODO Auto-generated method stub

    }

    public void onProcessUnstructuredSSIndication(
            ProcessUnstructuredSSIndication procUnstrInd) {
        // TODO Auto-generated method stub

    }

    public void onUnstructuredSSIndication(UnstructuredSSIndication unstrInd) {
        // TODO Auto-generated method stub

    }

    public static void main(String[] args) throws Exception {
        SccpProvider sccpProvider = getSccpProvider(); // JNDI lookup of SCCP

        SccpAddress localAddress = createLocalAddress();
        SccpAddress remoteAddress = createRemoteAddress();

        MAPExample example = new MAPExample(sccpProvider, localAddress,
                remoteAddress);

        example.run();

    }

}    		
		]]>
	</programlisting>
	</section>
</chapter>