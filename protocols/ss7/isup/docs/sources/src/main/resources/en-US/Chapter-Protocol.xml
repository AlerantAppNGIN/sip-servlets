<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "SS7_Stack_User_Guide.ent">%BOOK_ENTITIES;]>

<chapter id="protocol">

	<title>Protocol</title>


	<section>
		<title>API</title>
		<para>The &THIS.PLATFORM; &THIS.APPLICATION; API is transaction oriented. Transactions are used to exchanged messages that contain parameters with some trunk specific information.
		</para>
		<para>Some interfaces are listed below, with a short explanation.</para>
		<section>
			<title>Transaction</title>
			<para>The common part of transactions is defined as follows:</para>
			<programlisting language="Java" role="JAVA">
package org.mobicents.protocols.ss7.isup;

import org.mobicents.protocols.ss7.isup.message.ISUPMessage;

public interface ISUPTransaction {
	/**
	 * Get unique transaction key associated with this transaction
	 * @return
	 */
	public TransactionKey getTransactionKey();
	/**
	 * Determine if this transaction is server.
	 * @return
	 */
	public boolean isServerTransaction();
	/**
	 * Get original message which started this transaction
	 * @return
	 */
	public ISUPMessage getOriginalMessage();
	/**
	 * Determine if transaction has terminated properly.
	 * @return
	 */
	public boolean isTerminated();
	/**
	 * Determine if transaction has timeout.
	 * @return
	 */
	public boolean isTimedout();
	
}
			</programlisting>
			<para>
				The above interface declares the
				<literal>getTransactionKey</literal>
				method. It returns a transaction key which is unique for a certain
				transaction.
			</para>
			<para>The client transaction is defined as follows:</para>
			<programlisting language="Java" role="JAVA">
package org.mobicents.protocols.ss7.isup;

import java.io.IOException;

public interface ISUPClientTransaction extends ISUPTransaction {
	/**
	 * Send request for which this transaction has been created.
	 * @throws ParameterRangeInvalidException
	 * @throws IOException
	 */
	public void sendRequest() throws ParameterRangeInvalidException, IOException;
	/**
	 * State of this transaction
	 * @return
	 */
	public ISUPClientTransactionState getState();
}
			</programlisting>
			<para>The server transaction is defined accordingly to its role:</para>
			<programlisting language="Java" role="JAVA">
package org.mobicents.protocols.ss7.isup;

import java.io.IOException;
import org.mobicents.protocols.ss7.isup.message.ISUPMessage;

public interface ISUPServerTransaction extends ISUPTransaction{
	
	/**
	 * Send answer via this transaction.
	 * @param msg
	 * @throws ParameterRangeInvalidException
	 * @throws IllegalArgumentException
	 * @throws IOException
	 */
	public void sendAnswer(ISUPMessage msg) throws ParameterRangeInvalidException
		,IllegalArgumentException, IOException;
	/**
	 * Get state of this transaction.
	 * @return
	 */
	public ISUPServerTransactionState getState();
	
}
			</programlisting>
		</section>
		<section>
			<title>Factories</title>
      <note>
        <para>
          The ISUP
          stack declares separate factories for messages and their parameters.
          However, both interfaces are too big to have any use if mentioned in
          documentation.
          Please refer to the source for details.
        </para>
      </note>
		</section>
		<section>
			<title>Stack</title>
			<para>
				The ISUP
				stack relies on
				MTP
				to provide transport.
      </para>
      <para>
      The stack interface is defined as follows:
			</para>
			<programlisting language="Java" role="JAVA">
package org.mobicents.protocols.ss7.isup;

public interface ISUPStack {

	public ISUPProvider getIsupProvider();

	public void stop();

	public void start();
}
			</programlisting>
			<para>
				Stack declares the provider that allows the user to access stack
				facilities,
				send messages statelesly and register a listener. The provider
				is defined
				as follows:
			</para>
			<programlisting language="Java" role="JAVA">
package org.mobicents.protocols.ss7.isup;

import java.io.IOException;

import org.mobicents.protocols.ss7.isup.message.ISUPMessage;

public interface ISUPProvider {
	/**
	 * Stateles message send over MTP. No state is maintained.
	 * 
	 * @param msg
	 * @throws ParameterRangeInvalidException
	 * @throws IOException
	 */
	public void sendMessage(ISUPMessage msg) throws ParameterRangeInvalidException, IOException;

	public void addListener(ISUPListener listener);

	public void removeListener(ISUPListener listener);

	public ISUPParameterFactory getParameterFactory();

	public ISUPMessageFactory getMessageFactory();
	/**
	 * Create new client transaction if it does not exist.
	 * @param msg
	 * @return
	 * @throws TransactionAlredyExistsException
	 * @throws IllegalArgumentException
	 */
	public ISUPClientTransaction createClientTransaction(ISUPMessage msg) 
			throws TransactionAlredyExistsException, IllegalArgumentException;
	/**
	 * Create new server transaction if it does not exist.
	 * @param msg
	 * @return
	 * @throws TransactionAlredyExistsException
	 * @throws IllegalArgumentException
	 */
	public ISUPServerTransaction createServerTransaction(ISUPMessage msg) 
			throws TransactionAlredyExistsException, IllegalArgumentException;

}
			</programlisting>
			<para>
				The provider allows for a listener to be registered. A listener contains a set of call
				backs useful for
				the ISUP
				user. It is defined as follows:
			</para>
			<programlisting language="Java" role="JAVA">
package org.mobicents.protocols.ss7.isup;

import org.mobicents.protocols.ss7.isup.message.ISUPMessage;

/**
 *
 * @author kulikov
 * @author baranowb
 */
public interface ISUPListener {
	
	/**
	 * Called once stack receives proper ISUP message. Message holds reference to ongoing transaction if it exists.
	 * @param message
	 */
	public void onMessage(ISUPMessage message);
	// etc
	/**
	 * Called once transaction times out. Transaction times out if there 
	 * is no answer received within configured time.
	 */
	public void onTransactionTimeout(ISUPClientTransaction tx);
	/**
	 * Called once transaction times out. Transaction times out if there 
	 * is no answer received within configured time.
	 */
	public void onTransactionTimeout(ISUPServerTransaction tx);
	/**
	 * Called once transaction ends its lifecycle.
	 */
	public void onTransactionEnded(ISUPClientTransaction tx);
	/**
	 * Called once transaction ends its lifecycle.
	 */
	public void onTransactionEnded(ISUPServerTransaction tx);

	
	//transport methods
	/**
	 * Method called when transport provider is not able to send/rcv messages, 
	 * any calls to send methods after this callback will throw exception
	 */
	public void onTransportDown();
	/**
	 * Method called when transport provider is able to send/rcv messages, 
	 * any calls to send methods after this callback are welcome.
	 */
	public void onTransportUp();

	
}
			</programlisting>
		</section>
		<section>
			<title>Messages</title>
			<para>Each
				messsage defines different setters and getters, as each message
				type has a different set of parameters. However, all messages defined
				by &THIS.PLATFORM; &THIS.APPLICATION;
				have a common part:
			</para>
			<programlisting language="Java" role="JAVA">
package org.mobicents.protocols.ss7.isup.message;

public interface ISUPMessage extends ISUPComponent {

	/**
	 * Get mandatory field, CIC.
	 * @return
	 */
	public CircuitIdentificationCode getCircuitIdentificationCode();
	/**
	 * Set mandatory field, CIC.
	 * @return
	 */
	public void setCircuitIdentificationCode(CircuitIdentificationCode cic);

	/**
	 * Returns message code. See Q.763 Table 4. It simply return value of static
	 * constant, where value of parameter is value of MESSAGE_CODE
	 * 
	 * @return
	 */
	public MessageType getMessageType();
	
	/**
	 * Adds parameter to this message.
	 * @param param
	 * @throws ParameterRangeInvalidException - thrown if parameter is not part of message.
	 */
	public void addParameter(ISUPParameter param) throws ParameterRangeInvalidException;
	/**
	 * Returns parameter with passed code.
	 * @param parameterCode
	 * @return
	 * @throws ParameterRangeInvalidException - thrown if code does not match any parameter.
	 */
	public ISUPParameter getParameter(int parameterCode) throws ParameterRangeInvalidException;
	/**
	 * Removes parameter from this message.
	 * @param parameterCode
	 * @throws ParameterRangeInvalidException
	 */
	public void removeParameter(int parameterCode) throws ParameterRangeInvalidException;
	
	/**
	 * Return reference to transaction if it exists.
	 * @return
	 */
	public ISUPTransaction getTransaction();

	/**
	 * @return <ul>
	 *         <li><b>true</b> - if all requried parameters are set</li>
	 *         <li><b>false</b> - otherwise</li>
	 *         </ul>
	 */
	public boolean hasAllMandatoryParameters();

}
			</programlisting>
		</section>
	</section>
	<section>
		<title>Configuration</title>
		<para>
			The ISUP
			stack relies on MTP to provide transport. Please refer to the MTP documentation for the configuration options that are supported. Below is a list of ISUP specific configuration properties:
		</para>
		<table frame="all" pgwide="1">
			<title>ISUP Configuration Properties</title>
			<tgroup colsep="1" cols="4">
				<colspec colnum="1" colname="c0" />
				<colspec colnum="2" colname="c1" />
				<colspec colnum="3" colname="c2" />
				<colspec colnum="4" colname="c3" />
				<thead>
					<row>
						<entry>Property Name</entry>
						<entry>Description</entry>
						<entry>Property Type</entry>
						<entry>Default Value</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>isup.client.timeout</entry>
						<entry>
							Value of timeout in milliseconds. It controls the timeout of client
							transactions. This value must be lower than
							<literal>isup.general.timeout</literal>
						</entry>
						<entry>java.lang.Long</entry>
						<entry>30.000</entry>
					</row>
					<row>
						<entry>isup.general.timeout</entry>
						<entry>
							Value of timeout in milliseconds. It controls how long a transaction object lingers in the stack before it is released if no action is performed.
						</entry>
						<entry>java.lang.Long</entry>
						<entry>120.000</entry>
					</row>

				</tbody>
			</tgroup>
			<note>
				<para>ISUP requires M3UA MTP provider. Configuration parameters must include configuration for it. Refer to example.</para>
			</note>
		</table>
	</section>
	<section>
		<title>Example</title>
		<para></para>
		<programlisting language="Java" role="JAVA">
package org.mobicents.protocols.ss7.isup.impl;

import java.io.IOException;

import org.mobicents.protocols.ss7.isup.ISUPClientTransaction;
import org.mobicents.protocols.ss7.isup.ISUPListener;
import org.mobicents.protocols.ss7.isup.ISUPMessageFactory;
import org.mobicents.protocols.ss7.isup.ISUPParameterFactory;
import org.mobicents.protocols.ss7.isup.ISUPProvider;
import org.mobicents.protocols.ss7.isup.ISUPServerTransaction;
import org.mobicents.protocols.ss7.isup.ISUPStack;
import org.mobicents.protocols.ss7.isup.ParameterRangeInvalidException;
import org.mobicents.protocols.ss7.isup.TransactionAlredyExistsException;
import org.mobicents.protocols.ss7.isup.message.AddressCompleteMessage;
import org.mobicents.protocols.ss7.isup.message.AnswerMessage;
import org.mobicents.protocols.ss7.isup.message.ISUPMessage;
import org.mobicents.protocols.ss7.isup.message.InitialAddressMessage;
import org.mobicents.protocols.ss7.isup.message.parameter.CalledPartyNumber;
import org.mobicents.protocols.ss7.isup.message.parameter.CallingPartyCategory;
import org.mobicents.protocols.ss7.isup.message.parameter.CircuitIdentificationCode;
import org.mobicents.protocols.ss7.isup.message.parameter.ForwardCallIndicators;
import org.mobicents.protocols.ss7.isup.message.parameter.NatureOfConnectionIndicators;
import org.mobicents.protocols.ss7.isup.message.parameter.TransmissionMediumRequirement;


public class ClientIAM implements ISUPListener {
	private MTPProvider mtpProvider;
	private ISUPStack isupStack;
	private ISUPProvider provider;
	private ISUPMessageFactory factory;
	private ISUPParameterFactory parameterFactory;


	private ISUPClientTransaction ctx;
	
	
	public ClientIAM(MTPProvider mtpProvider) {
		super();
		
		Properties props = new Properties();
		props.setProperty("mtp.drive","m3ua");
		props.setProperty("mtp.opc","123");
        props.setProperty("mtp.apc","321");
        props.setProperty("mtp.address.local","192.168.1.1:123");
        props.setProperty("mtp.address.remote","192.168.1.12:321");
        //no need to set timeout, default value is ok;
        
		this.isupStack = new ISUPStackImpl();
		this.isupStack.configure(props);
		this.isupStack.start();
		this.provider = this.isupStack.getIsupProvider();
		this.factory = this.provider.getMessageFactory();
		this.parameterFactory = this.provider.getParameterFactory();
	}

	public void start() throws IllegalArgumentException, TransactionAlredyExistsException
		, ParameterRangeInvalidException, IOException {
		InitialAddressMessage iam = this.factory.createIAM();

		// create obligatory params!
		NatureOfConnectionIndicators nais = this.parameterFactory.createNatureOfConnectionIndicators();
		nais.setContinuityCheckIndicator(
			NatureOfConnectionIndicators._CCI_PERFORMED_ON_PREVIOUS_CIRCUIT);
		nais.setEchoControlDeviceIndicator(NatureOfConnectionIndicators._ECDI_INCLUDED);
		nais.setSatelliteIndicator(NatureOfConnectionIndicators._SI_TWO_SATELLITE);

		ForwardCallIndicators fcis = this.parameterFactory.createForwardCallIndicators();
		fcis.setEndToEndInformationIndicator(true);
		fcis.setEndToEndMethodIndicator(fcis._ETEMI_PASSALONG);
		fcis.setInterworkingIndicator(false);
		fcis.setIsdnAccessIndicator(true);

		CallingPartyCategory cpg = this.parameterFactory.createCallingPartyCategory();
		// ?
		cpg.setCallingPartyCategory((byte) 1);

		TransmissionMediumRequirement tmr = this.
			parameterFactory.createTransmissionMediumRequirement();
		tmr.setTransimissionMediumRequirement(tmr._MEDIUM_14x64_KBIT_UNRESTRICTED);

		CalledPartyNumber cpn = this.parameterFactory.createCalledPartyNumber();
		cpn.setAddress("123455");
		cpn.setNumberingPlanIndicator(cpn._NPI_ISDN);
		cpn.setNatureOfAddresIndicator(cpn._NAI_NATIONAL_SN);
		cpn.setInternalNetworkNumberIndicator(cpn._INN_ROUTING_ALLOWED);

		iam.setNatureOfConnectionIndicators(nais);
		iam.setForwardCallIndicators(fcis);
		iam.setCallingPartCategory(cpg);
		iam.setTransmissionMediumRequirement(tmr);
		iam.setCalledPartyNumber(cpn);

		CircuitIdentificationCode cic = this.parameterFactory.createCircuitIdentificationCode();
		cic.setCIC(12);
		iam.setCircuitIdentificationCode(cic);
		
		ctx = this.provider.createClientTransaction(iam);

		ctx.sendRequest();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.mobicents.protocols.ss7.isup.ISUPListener#onMessage(org.mobicents
	 * .protocols.ss7.isup.message.ISUPMessage)
	 */
	public void onMessage(ISUPMessage message) {
		switch (message.getMessageType().getCode()) {
		case AddressCompleteMessage.MESSAGE_CODE:
			
			//ACM is send back as first
	
			break;
		case AnswerMessage.MESSAGE_CODE:
			//second, this terminates transaction
			break;
		default:

		}

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.mobicents.protocols.ss7.isup.ISUPListener#onTransactionEnded(org.
	 * mobicents.protocols.ss7.isup.ISUPClientTransaction)
	 */
	public void onTransactionEnded(ISUPClientTransaction tx) {

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.mobicents.protocols.ss7.isup.ISUPListener#onTransactionEnded(org.
	 * mobicents.protocols.ss7.isup.ISUPServerTransaction)
	 */
	public void onTransactionEnded(ISUPServerTransaction tx) {


	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.mobicents.protocols.ss7.isup.ISUPListener#onTransactionTimeout(org
	 * .mobicents.protocols.ss7.isup.ISUPClientTransaction)
	 */
	public void onTransactionTimeout(ISUPClientTransaction tx) {

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.mobicents.protocols.ss7.isup.ISUPListener#onTransactionTimeout(org
	 * .mobicents.protocols.ss7.isup.ISUPServerTransaction)
	 */
	public void onTransactionTimeout(ISUPServerTransaction tx) {

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.mobicents.protocols.ss7.isup.ISUPListener#onTransportDown()
	 */
	public void onTransportDown() {
		// TODO Auto-generated method stub

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.mobicents.protocols.ss7.isup.ISUPListener#onTransportUp()
	 */
	public void onTransportUp() {
		// TODO Auto-generated method stub

	}



}

		</programlisting>
	</section>

</chapter>

